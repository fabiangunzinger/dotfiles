# tmux configuration, fabian gunzinger

################
# Key bindings #
################

# Use C-s (control and s key at the same time) as the prefix key
# Last line allows us to use C-s in programs by pressing <prefix> C-s
# (i.e. C-s C-s), and allows for repeated use without having to press
# prefix each time.
# Why C-s? Often used alternative C-a is also "go to beginning of line",
# which is too useful to give up, while C-s is "forward incremental
# history search, which I basically never use". 
unbind C-b
set -g prefix C-s
bind-key -r C-s send-prefix


### Panes ###

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# Use vim-like pane selection (-n makes them work without <prefix>)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Pane resizing
## Fine adjustment (1 or 2 cursor cells per bump)
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

## Coarse adjustment (5 or 10 cursor cells per bump)
## Needed to disable mission control key-bindings in system
##Â preferences - keyboard - shortcuts for this to work.
bind -n C-Left resize-pane -L 10
bind -n C-Right resize-pane -R 10
bind -n C-Down resize-pane -D 5
bind -n C-Up resize-pane -U 5


### Windows ###

# More intuitive window split shortcuts (\ needs to be escaped)
# Uses current path of pane from which I initiate splits
bind-key - split-window -v -c '#{pane_current_path}'
bind-key \\ split-window -h -c '#{pane_current_path}'

# Create new window with path of last pane
bind-key c new-window -c '#{pane_current_path}'

# Move current pane to separate window in the background
# Use case: start Jupyter Lab, check that it starts properly,
# then move to background.
# (-d detaches the newly created window, meaning it's
# kept in the background.)
bind-key b break-pane -d


### Sessions ###

bind-key C-j choose-tree

### Easy access ###

# Open htop for process monitoring
# htop attached to split pane, so q to exit htop also destroys pane
# -h provides command to window, -c specified directory
bind-key h split-window -h "htop"
bind-key w split-window -h -c ~/my-notes "nvim +CommandT"

# Switch tmux sessions using fuzzy-matching
bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"



### Misc. ###

# Source tmux config
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Scrollback
# From https://thoughtbot.com/blog/tmux-copy-paste-on-os-x-a-better-future
# Use vim keybindings in copy mode
setw -g mode-keys vi
# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# Prompted join-pane
# Bring selected pane in split to the right from current pane
bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# Breaking out sessions
# Start a new session from the current directory within a tmux pane
bind-key C-b send-keys 'tat && exit' 'C-m'

# Kill current session
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'



###########
# Options #
###########

# Keep a lot of history for scrollback
set-option -g history-limit 10000

# Use vim bindings (e.g. J and K) for navigation (e.g. in choose-tree)
setw -g mode-keys vi

# Use richer colours
set-option -g default-terminal "screen-256color"

# Use terminal/emacs style behaviour in tmux status line
set-option -g status-keys "emacs"

# Use greytones for tmux status bar background and foreground
set-option -g status-bg "#666666"
set-option -g status-fg "#aaaaaa"

# Display 50 characters of session name in left corner of status line
# and custom formated time and date infor in right corner
set-option -g status-left-length 50
set-option -g status-right " #(battery -t)  #(date '+%a, %b %d - %I:%M') "

# 1-based window indexing
# First line starts window indexing at 1, second ensures consistent indexing as we
# create and destroy windows.
set-option -g base-index 1
set-option -g renumber-windows on



# Old stuff - integrate as needed

# ## enable mouse mode

set -g mouse on

## prevent automatic window renaming
#set-option -g allow-rename off


